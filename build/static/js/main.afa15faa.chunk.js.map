{"version":3,"sources":["config.js","components/context/index.js","components/Photo.js","components/defaultSeach/Cats.js","components/defaultSeach/Dogs.js","components/defaultSeach/Computers.js","components/NotFound.js","components/PhotoContainer.js","components/ErrorPage.js","components/Routers.js","components/Nav.js","components/SearchForm.js","App.js","serviceWorker.js","index.js"],"names":["apiKey","PhotoContext","createContext","Provider","props","useState","cats","setCats","dogs","setDogs","computers","setComputers","searchTag","setSearchTag","searchResults","setSearchResults","isLoading","setIsLoading","result","setResult","useEffect","axios","get","then","response","data","photos","photo","catch","error","console","log","value","action","updateResults","search","URL","length","children","Consumer","Photo","className","src","farm","server","id","secret","alt","PhotoContainer","map","key","NotFound","ErrorPage","style","display","justifyContent","width","background","to","Routers","exact","path","render","routerProps","Cats","Dogs","Computers","Nav","withRouter","setSearch","context","onSubmit","event","preventDefault","history","push","type","onChange","target","fill","height","viewBox","xmlns","d","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.afa15faa.chunk.js","sourcesContent":["const apiKey = 'f7ea15851d4e4da8904eca37e216607a';\r\n\r\nexport default apiKey;","import React, { createContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport apiKey from '../../config';\r\n\r\n// create Photo Context to pass props\r\nconst PhotoContext = createContext();\r\n\r\nexport const Provider = (props) => {\r\n  // set state using hooks\r\n  const [cats, setCats] = useState([]);\r\n  const [dogs, setDogs] = useState([]);\r\n  const [computers, setComputers] = useState([]);\r\n  const [searchTag, setSearchTag] = useState('');\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [result, setResult] = useState(false);\r\n\r\n  // when DOM is rendered, call API with axios and update photos state to data received; \r\n    // load 3 default searches into photo state\r\n  useEffect( () => {\r\n    // API fetch with axios for cat search\r\n    axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=cats&per_page=24&format=json&nojsoncallback=1`)\r\n      .then( response => setCats( response.data.photos.photo ))\r\n      .catch( error => console.log(error) );\r\n\r\n    // API fetch for default dogs results\r\n    axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=dogs&per_page=24&format=json&nojsoncallback=1`)\r\n      .then( response => setDogs( response.data.photos.photo ))\r\n      .catch( error => console.log(error));\r\n          \r\n      // API fetch for default computer results\r\n      axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=computers&per_page=24&format=json&nojsoncallback=1`)\r\n        .then( response => setComputers( response.data.photos.photo ))\r\n        .catch( error => console.log(error));\r\n  }, [cats]); // only re-run the effect if cats state changes\r\n\r\n  // function to fetch new API with tag from search form and update photos state\r\n  const updateResults = (search) => {\r\n    const URL = `https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${search}&per_page=24&format=json&nojsoncallback=1`;\r\n    \r\n    // set isLoading state to true while retrieiving data; display loading text in render page\r\n    setIsLoading(true);\r\n    \r\n    axios.get(URL)\r\n      .then(response => {\r\n        // if images are returned, set state to be an array of images, else set result state to be false\r\n        // set isLoading to be false to display page with photos\r\n        if(response.data.photos.photo.length > 0) {\r\n          setSearchResults(response.data.photos.photo);\r\n          setSearchTag(search);\r\n          setIsLoading(false);\r\n          setResult(true);\r\n        } else {\r\n          setIsLoading(false);\r\n          setResult(false);\r\n        }\r\n      })\r\n      .catch( error => console.log(error) );\r\n  };\r\n \r\n  return(\r\n      <PhotoContext.Provider value={{\r\n          cats: cats,\r\n          dogs: dogs,\r\n          computers: computers,\r\n          searchTag: searchTag,\r\n          searchResults: searchResults,\r\n          isLoading: isLoading,\r\n          result: result,\r\n          action: {\r\n              updateResults: updateResults\r\n          }\r\n      }}>\r\n          { props.children }\r\n      </PhotoContext.Provider>\r\n  );\r\n}\r\n\r\nexport const Consumer = PhotoContext.Consumer;","import React from 'react';\r\nimport '../css/index.css';\r\n\r\nconst Photo = (props) => {\r\n    return(\r\n        <div className='photo-thumbnail'>\r\n            <li>\r\n                <img \r\n                    src={`https://farm${props.photo.farm}.staticflickr.com/${props.photo.server}/${props.photo.id}_${props.photo.secret}.jpg`}\r\n                    alt={props.photo.id} \r\n                    />\r\n            </li>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Photo;","import React from 'react';\r\nimport { Consumer } from '../context';\r\nimport Photo from '../Photo';\r\nimport '../../css/index.css';\r\n\r\nconst PhotoContainer = () => {\r\n    return(\r\n        // use context to consumer data from Provider\r\n        <Consumer>\r\n            {/* deconstruct cats prop from context */}\r\n            { ({ cats }) => {\r\n                return(\r\n                    <div className='photo-container'>\r\n                        <div className='title-container'>\r\n                            <h2 className='title'>Cats</h2>\r\n                        </div>\r\n                        <ul>\r\n                            {/* map through cats context and render Photo Component */}\r\n                            {cats.map(photo => (\r\n                                <Photo key={ photo.id } photo={ photo } />\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                );\r\n            }}\r\n        </Consumer>\r\n        \r\n    );\r\n}\r\n\r\nexport default PhotoContainer;","import React from 'react';\r\nimport { Consumer } from '../context';\r\nimport Photo from '../Photo';\r\nimport '../../css/index.css';\r\n\r\nconst PhotoContainer = () => {\r\n    return(\r\n        // use context to consumer data from Provider\r\n        <Consumer>\r\n            {/* deconstruct cats prop from context */}\r\n            { ({ dogs }) => {\r\n                return(\r\n                    <div className='photo-container'>\r\n                        <div className='title-container'>\r\n                            <h2 className='title'>Dogs</h2>\r\n                        </div>\r\n                        <ul>\r\n                           {/* map through cats context and render Photo Component */}\r\n                            {dogs.map(photo => (\r\n                                <Photo key={ photo.id } photo={ photo } />\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                );\r\n            }}\r\n        </Consumer>\r\n    );\r\n}\r\n\r\nexport default PhotoContainer;","import React from 'react';\r\nimport { Consumer } from '../context';\r\nimport Photo from '../Photo';\r\nimport '../../css/index.css';\r\n\r\nconst PhotoContainer = () => {\r\n    return(\r\n        // use context to consumer data from Provider\r\n        <Consumer>\r\n            {/* deconstruct cats prop from context */}\r\n            { ({ computers }) => {\r\n                return(\r\n                    <div className='photo-container'>\r\n                        <div className='title-container'>\r\n                            <h2 className='title'>Computers</h2>\r\n                        </div>\r\n                        <ul>\r\n                            {/* map through cats context and render Photo Component */}\r\n                            {computers.map(photo => (\r\n                                <Photo key={ photo.id } photo={ photo } />\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                );\r\n            }}\r\n        </Consumer>\r\n    );\r\n}\r\n\r\nexport default PhotoContainer;","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n    return(\r\n        <div className='photo-container'>\r\n            <ul>\r\n                <li className='not-found'>\r\n                    <h3>No results found</h3>\r\n                    <p>That search did not return any results, please try again.</p>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NotFound;","import React from 'react';\r\nimport { Consumer } from './context';\r\nimport Photo from './Photo';\r\nimport NotFound from './NotFound';\r\nimport '../css/index.css';\r\n\r\nconst PhotoContainer = () => {\r\n    return(\r\n        <Consumer>\r\n            {/* deconstruct cats prop from context */}\r\n            { ({ isLoading, result, searchResults, searchTag }) => {\r\n                return(\r\n                    // check if data is loading and render\r\n                        // if page is loaded, check if there are results;\r\n                            // render results photos if there are results, else render NotFound Component\r\n                    <div>\r\n                        {(isLoading) ? <p>Loading...</p> : (\r\n                            (result) ? (\r\n                                <div>\r\n                                    <div className='photo-container'>\r\n                                        <div className='title-container'>\r\n                                            <h2 className='title'>{searchTag}</h2>\r\n                                        </div>\r\n                                        <ul>\r\n                                            {searchResults.map(photo => (\r\n                                                <Photo key={ photo.id } photo={ photo } />\r\n                                            ))}\r\n                                        </ul>\r\n                                    </div>\r\n                                </div>\r\n                            ) : <div><NotFound /></div>\r\n                        )}\r\n                    </div>\r\n                );\r\n            }}\r\n        </Consumer>\r\n    );\r\n}\r\n\r\nexport default PhotoContainer;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ErrorPage = () => {\r\n    return(\r\n        <div className='photo-container main-nav'>\r\n            <ul>\r\n                <li className='not-found'>\r\n                    <h3>404 Error: Page Not Found. Sorry!</h3>\r\n                    <p>To be redirected back to the home page, click below:</p>\r\n                    <p style={{ display: 'flex', justifyContent: 'center' }}>\r\n                        <Link style={{ width: '100px', background: 'red' }} to='/'>Go Back!</Link></p>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ErrorPage","import React from 'react';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport Cats from './defaultSeach/Cats';\r\nimport Dogs from './defaultSeach/Dogs';\r\nimport Computers from './defaultSeach/Computers';\r\nimport PhotoContainer from './PhotoContainer';\r\nimport ErrorPage from './ErrorPage';\r\n\r\nconst Routers = () => {\r\n    return(\r\n        <Switch>\r\n            <Route exact path='/' render={ () => <Redirect to='/cats' /> } />\r\n            {/* pass route props (history) to Cats Component */}\r\n            <Route exact path='/cats' render={ (routerProps) => <Cats {...routerProps} /> } />\r\n            <Route exact path='/dogs' render={ () => <Dogs /> } />\r\n            <Route exact path='/computers' render={ () => <Computers /> } />\r\n            <Route exact path='/:id' render={ () => <PhotoContainer /> } />\r\n            {/* redirect back to home page if at any other URL */}\r\n            <Route render={ () => <ErrorPage /> } />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Routers;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport '../css/index.css';\r\n\r\nconst Nav = () => {\r\n    return(\r\n        <div>\r\n            {/* Nav Links */}\r\n            <nav className='main-nav'>\r\n                <ul>\r\n                    <li><NavLink exact to='/cats'>Cats</NavLink></li>\r\n                    <li><NavLink exact to='/dogs'>Dogs</NavLink></li>\r\n                    <li><NavLink exact to='/computers'>Computers</NavLink></li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Nav;","// import useState from react Hooks\r\nimport React, { useState } from 'react';\r\n// import withRouter to use history prop outside of Router\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Consumer } from './context';\r\nimport '../css/index.css';\r\n\r\nconst SearchForm = (props) => {\r\n    // use hooks to set search state\r\n    const [search, setSearch] = useState('');\r\n\r\n    return(\r\n        <Consumer>\r\n            { context => {\r\n                // set state to current value of input field\r\n                const handleUpdate = (event) => {\r\n                    // use hooks setState method to update search state\r\n                    setSearch(event.target.value);\r\n                };\r\n                            \r\n                // prevent page refresh and call function from parent, passing search as parameter to update URL\r\n                const handleSubmit = (event) => {\r\n                    event.preventDefault();\r\n                    context.action.updateResults(search);\r\n                    setSearch('');\r\n\r\n                    // redirect page to search with router's history prop\r\n                    props.history.push(`${search}`);\r\n                };\r\n\r\n                return(\r\n                    <div>\r\n                        {/* Search field */}\r\n                        <form className='search-form' onSubmit={ handleSubmit } >\r\n                            {/* update search state on every keypress */}\r\n                            <input type='search' value={ search } onChange={ handleUpdate} />\r\n                            <button>\r\n                                {/* svg of search icon */}\r\n                                <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                    <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\r\n                                    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                                </svg>\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                );\r\n            }}\r\n        </Consumer>\r\n    );\r\n}\r\n\r\n// wrap export with withRouter to use history prop outside of Router\r\nexport default withRouter(SearchForm);","import React from 'react';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { Provider } from './components/context';\r\nimport Routers from './components/Routers';\r\nimport Nav from './components/Nav';\r\nimport SearchForm from './components/SearchForm';\r\nimport './css/index.css';\r\n\r\nconst App = () => {\r\n  // render SearchForm, Nav and Routers Component\r\n  return( \r\n    <HashRouter>\r\n      <div className='container'>\r\n        <Provider>\r\n          <SearchForm />\r\n          <Nav />\r\n          <Routers />\r\n        </Provider>\r\n      </div>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}